plugins {
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.springframework.boot' version '3.3.4'
    id 'org.sonarqube' version '6.3.1.5724'
    id "org.owasp.dependencycheck" version "12.1.6"
}

ext {
    logbackEcsEncoderVersion = '1.6.0'
    okhttpVersion = '4.12.0'
    shedlockVersion = '5.16.0'
    springDocVersion = '1.8.0'
    zip4jVersion = '2.11.5'

    springbootMavenBomVersion = '3.3.4'

    nvdMirror = 'https://vulnz-nvd-mirror-devtest.intyg.nordicmedtest.se'
}

group = 'se.inera.intyg.cts'
version = System.properties['buildVersion'] ?: '0.0.1-SNAPSHOT'

allprojects {
    repositories {
        mavenCentral()
    }
}

sonar {
    properties {
        property "sonar.projectKey", "intyg-cts"
        property "sonar.projectName", "intyg-cts"
        property "sonar.dependencyCheck.jsonReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.json" as String
        property "sonar.dependencyCheck.htmlReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.html" as String
    }
}

dependencyCheck {
    formats = ['HTML', 'JSON']
    nvd.setDatafeedUrl(nvdMirror)
    analyzers.setAssemblyEnabled(false)
    analyzers.setNodeEnabled(false)
    analyzers.setCentralEnabled(false)
    analyzers.ossIndex.setUsername(project.properties.get('ossIndexUsername') as String)
    analyzers.ossIndex.setPassword(project.properties.get('ossIndexPassword') as String)
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = '21'
    targetCompatibility = '21'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/testability/**"
                ])
            }))
        }
    }

    sonar {
        properties {
            property "sonar.exclusions", "**/testability/**"
        }
    }
}
