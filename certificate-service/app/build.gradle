plugins {
    alias(libs.plugins.org.springframework.boot)
    id 'java-test-fixtures'
}

def applicationDir = "${rootProject.projectDir}/devops/dev"

dependencies {
    implementation project(':domain')
    implementation project(':clinicalprocess-certificate-v4')
    implementation project(':logging')

    implementation "co.elastic.logging:logback-ecs-encoder"
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-activemq'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly project(':pdfbox-generator')
    runtimeOnly project(':integration-certificate-print-service')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation testFixtures(project(":domain"))

    testFixturesImplementation platform("se.inera.intyg.bom:platform:${intygBomVersion}")
    testFixturesCompileOnly 'jakarta.persistence:jakarta.persistence-api'
    testFixturesImplementation 'com.fasterxml.jackson.core:jackson-annotations'
    testFixturesImplementation testFixtures(project(":domain"))
}

testing.suites {
    test { useJUnitJupiter() }
}

bootRun {
    systemProperty("application.dir", "${rootProject.projectDir}/devops/dev")
    systemProperty("spring.profiles.active", "testability,dev")
    systemProperty("spring.config.additional-location", "file:${applicationDir}/config/")
}

tasks.register("appRunDebug") {
    println("######## Running in Debug mode ########")
    doFirst {
        bootRun.configure {
            jvmArgs = [
                    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18031",
                    "-Dlogging.config=${rootProject.projectDir}/devops/dev/config/logback-spring.xml",
                    "-Dunit.access.configuration.path=${rootProject.projectDir}/devops/dev/config/certificate-unit-access-config.json"
            ]
        }
    }
    finalizedBy("bootRun")
}

tasks.register("appRun") {
    println("######## Running in normal mode ########")
    doFirst {
        bootRun.configure {
            jvmArgs = ["-Dlogging.config=${rootProject.projectDir}/devops/dev/config/logback-spring.xml"]
        }
    }
    finalizedBy("bootRun")
}