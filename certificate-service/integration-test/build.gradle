apply plugin: "java-test-fixtures"
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.util.regex.Matcher

dependencies {
    implementation project(':domain')
    implementation project(':app')

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'com.fasterxml.jackson.core:jackson-annotations'
    testCompileOnly 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation "org.testcontainers:mysql:${testContainersMysqlVersion}"
    testImplementation "org.testcontainers:activemq:${testContainersActivemqVersion}"
    testImplementation 'org.testcontainers:mockserver'
    testImplementation "org.mock-server:mockserver-client-java:${mockServerClientVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-activemq'
    testImplementation testFixtures(project(":app"))
    testImplementation testFixtures(project(":domain"))
}

testing {
    suites {
        integrationTest(JvmTestSuite) {
            testType = TestSuiteType.INTEGRATION_TEST
            description = 'Runs integration tests.'
            group = 'verification'

            sources {
                java {
                    srcDirs = ['src/test/java']
                }
                resources {
                    srcDirs = ['src/test/resources']
                }
            }
            configurations {
                integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
                integrationTestImplementation.extendsFrom testImplementation
                integrationTestCompileOnly.extendsFrom testCompileOnly
            }
            targets.all {
                testTask.configure {
                    shouldRunAfter(test)
                    minHeapSize = "512m"
                    maxHeapSize = "3g"
                }
            }
        }
    }
}

def today = LocalDate.now()
def isoFormatter = DateTimeFormatter.ISO_LOCAL_DATE

tasks.named('processIntegrationTestResources', Copy).configure {
    outputs.upToDateWhen { false }

    doLast {
        fileTree(destinationDir).matching {
            include 'prefill/**/*.xml'
        }.each { File file ->
            String text = file.getText('UTF-8')

            def matcher = (text =~ /<ns4:datePeriod>\s*<ns4:start>(\d{4}-\d{2}-\d{2})<\/ns4:start>\s*<ns4:end>(\d{4}-\d{2}-\d{2})<\/ns4:end>\s*<\/ns4:datePeriod>/)
            def periods = matcher.collect { full, oldStartStr, oldEndStr ->
                [
                        oldStart: LocalDate.parse(oldStartStr, isoFormatter),
                        oldEnd  : LocalDate.parse(oldEndStr, isoFormatter)
                ]
            }

            if (!periods.isEmpty()) {
                def firstOldStart = periods[0].oldStart
                periods.eachWithIndex { p, idx ->
                    long offsetDays = ChronoUnit.DAYS.between(firstOldStart, p.oldStart)
                    long lengthDays = ChronoUnit.DAYS.between(p.oldStart, p.oldEnd)
                    def newStart = today.plusDays(offsetDays)
                    def newEnd = newStart.plusDays(lengthDays)

                    def replacement =
                            """<ns4:datePeriod>
                                <ns4:start>${newStart.format(isoFormatter)}</ns4:start>
                                <ns4:end>${newEnd.format(isoFormatter)}</ns4:end>
                                </ns4:datePeriod>
                                """

                    text = text.replaceFirst(
                            /<ns4:datePeriod>\s*<ns4:start>\d{4}-\d{2}-\d{2}<\/ns4:start>\s*<ns4:end>\d{4}-\d{2}-\d{2}<\/ns4:end>\s*<\/ns4:datePeriod>/, Matcher.quoteReplacement(replacement)
                    )
                }
            }

            text = text.replaceAll(
                    /(?<!<ns4:start>|<ns4:end>)(\d{4}-\d{2}-\d{2})/,
                    today.format(isoFormatter)
            )

            file.write(text, 'UTF-8')
        }
    }
}