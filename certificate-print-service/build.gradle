plugins {
    alias(libs.plugins.org.springframework.boot)
    alias(libs.plugins.org.sonarqube)
    alias(libs.plugins.org.owasp.dependencycheck)
    alias(libs.plugins.com.github.ben.manes.versions)
    id 'test-report-aggregation'
    id 'application'
}

ext {
    ineraMavenRepository = 'https://nexus.drift.inera.se/repository/it-public/'
    //ineraMavenRepository = 'http://172.21.0.1:37373/repository/it-public/'
    nvdMirror = 'https://vulnz-nvd-mirror-devtest.intyg.nordicmedtest.se'

    bomVersion = System.properties['bomVersion'] ?: '0.0.1-SNAPSHOT'
}

group = 'se.inera.intyg.certificateprintservice'
version = System.properties['buildVersion'] ?: '0.0.1-SNAPSHOT'
mainClassName = 'se.inera.intyg.certificateprintservice.CertificatePrintServiceApplication'

sonar {
    properties {
        property "sonar.projectKey", "intyg-certificate-print-service"
        property "sonar.projectName", "intyg-certificate-print-service"
        property "sonar.dependencyCheck.jsonReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.json" as String
        property "sonar.dependencyCheck.htmlReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.html" as String
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven { url "${ineraMavenRepository}" }
//        maven {
//            url "http://172.21.0.1:37373/repository/it-public/"
//            allowInsecureProtocol = true
//        }
        mavenCentral()
    }
}


dependencyCheck {
    formats = List.of("HTML", "JSON")
    nvd.setDatafeedUrl(nvdMirror)
    analyzers.setAssemblyEnabled(false)
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    dependencies {
        implementation platform("se.inera.intyg.bom:platform:${bomVersion}")
        annotationProcessor platform("se.inera.intyg.bom:platform:${bomVersion}")
    }

    sourceCompatibility = '21'
    targetCompatibility = '21'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/testability/**",
                        "**/integrationtest/**"
                ])
            }))
        }
    }

    sonar {
        properties {
            property "sonar.exclusions", "**/testability/**,**/integrationtest/**"
        }
    }
}

reporting {
    reports {
        integrationTestAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.INTEGRATION_TEST
        }
    }

    dependencies {
        testReportAggregation project(':app')
        testReportAggregation project(':playwright-pdf-generator')
        testReportAggregation project(':pdf-generator-api')
    }
}
