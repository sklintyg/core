plugins {
    alias(libs.plugins.org.springframework.boot)
}

def applicationDir = "${rootProject.projectDir}/devops/dev"

dependencies {

    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-activemq'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"

    compileOnly "org.projectlombok:lombok"

    annotationProcessor "org.projectlombok:lombok"

    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"

    testFixturesImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testFixturesImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
}

testing.suites {
    test { useJUnitJupiter() }
}

bootRun {
    systemProperty("application.dir", "${applicationDir}")
    systemProperty("spring.profiles.active", "testability,dev")
    systemProperty("spring.config.additional-location", "file:${applicationDir}/config/")
}

tasks.register("appRunDebug") {
    println("######## Running in Debug mode ########")
    doFirst {
        bootRun.configure {
            jvmArgs = [
                    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18051"]
        }
    }
    finalizedBy("bootRun")
}

tasks.register("appRun") {
    println("######## Running in normal mode ########")
    finalizedBy("bootRun")
}
